//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Medicaly.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MedicalyDBEntities : DbContext
    {
        public MedicalyDBEntities()
            : base("name=MedicalyDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Alamat> Alamats { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<DetailTransaction> DetailTransactions { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<HeaderTransaction> HeaderTransactions { get; set; }
        public virtual DbSet<Konsultasi> Konsultasis { get; set; }
        public virtual DbSet<Pharmacy> Pharmacies { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ShoppingCart> ShoppingCarts { get; set; }
        public virtual DbSet<Spesiali> Spesialis { get; set; }
    
        public virtual int AddTransaction(Nullable<int> customerId, string transactionDate, string paymentType, string bankName, string bankAccountName, string bankAccountNumber, string transferNominal, string transferProof, Nullable<int> productId, Nullable<int> quantity)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var transactionDateParameter = transactionDate != null ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankAccountNameParameter = bankAccountName != null ?
                new ObjectParameter("BankAccountName", bankAccountName) :
                new ObjectParameter("BankAccountName", typeof(string));
    
            var bankAccountNumberParameter = bankAccountNumber != null ?
                new ObjectParameter("BankAccountNumber", bankAccountNumber) :
                new ObjectParameter("BankAccountNumber", typeof(string));
    
            var transferNominalParameter = transferNominal != null ?
                new ObjectParameter("TransferNominal", transferNominal) :
                new ObjectParameter("TransferNominal", typeof(string));
    
            var transferProofParameter = transferProof != null ?
                new ObjectParameter("TransferProof", transferProof) :
                new ObjectParameter("TransferProof", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTransaction", customerIdParameter, transactionDateParameter, paymentTypeParameter, bankNameParameter, bankAccountNameParameter, bankAccountNumberParameter, transferNominalParameter, transferProofParameter, productIdParameter, quantityParameter);
        }
    
        public virtual int UpdateTransactionStatus(Nullable<int> transactionId, string status)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTransactionStatus", transactionIdParameter, statusParameter);
        }
    }
}
